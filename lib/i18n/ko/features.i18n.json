{
    "use_turkish": "Use turkish",
    "try_now": "What you can try",
    "others": "Others",
    "api": {
        "title": "API & Auth",
        "explanation": "Rest and graphql api support with token renewal and socket support using Dio, GraphQL, and Fresh."
    },
    "performance": {
        "title": "Performance",
        "explanation": "Performance optimized for lag caused by builds, such as page switches or rapid scrolling of complex lists, through frame-splitting rendering via keframe."
    },
    "state": {
        "title": "State & Architecture",
        "explanation": "BLoC & Hydrated Bloc helps to separate Business Logic from UI by creating persistent and powerful state management."
    },
    "linting": {
        "title": "Advanced Linting",
        "explanation": "Linting rules with detailed settings to keep the health of the code good and up to the dart standards."
    },
    "type_safety": {
        "title": "Type Safety",
        "explanation": "The boilerplate uses type-safety first approach (languages, assets, etc.) to help you avoid problems by catching null errors during development rather than at runtime."
    },
    "forms": {
        "title": "Forms",
        "explanation": "Creating and managing forms has never been so easy and fun. Reactive forms is a model-driven approach to handling forms inputs and validations."
    },
    "testing": {
        "title": "Testing",
        "explanation": "The more features the app has, the harder it is to test manually. Automated tests help ensure that the app performs correctly before you publish it with Bloc Test, Golden Tookit, and Mocktail."
    },
    "di_locator": {
        "title": "DI & Locator",
        "explanation": "Reduce tight coupling between classes thus achieving greater reusability of your code with Injectable and GetIt."
    },
    "code_generation": {
        "title": "Code Generation",
        "explanation": "Maximize productivity and improve code quality by generating data classes with Freezed, Artemis, and Build Runner."
    },
    "ci_cd": {
        "title": "CI & CD Integration",
        "explanation": "CI/CD is used to continuously deliver code into production, and ensure an ongoing flow of new features and bug fixes via the most efficient delivery method by using Codemagic."
    },
    "routing": {
        "title": "Routing",
        "explanation": "AutoRouter allows for strongly-typed arguments passing, effortless deep-linking, and code generation to simplify routes reduce code boilerplate."
    },
    "pattern": {
        "title": "Desing Pattern",
        "explanation": "Repository design pattern reduces the complexity of the data layer, isolates unstructured data from the rest of the app, and organizes project structure."
    },
    "exceptions": {
        "title": "Exceptions",
        "explanation": "It is not a very ideal solution to handle exceptions using try and catch at every function, Data Channel provides utility for handling exceptions and data routing."
    },
    "storage": {
        "title": "Encrypted Storage",
        "explanation": "Şifreli depolama, Secure Storage paketini kullanarak token ve kullanıcı bilgilerini platform anahtar zincirinde güvenli bir şekilde tutmanıza olanak tanır."
    },
    "dynamic_theme": {
        "title": "Dynamic Theme",
        "explanation": "With Android 12 and Material You, wallpaper colors can be extracted to create a ColorScheme that can be used to color the app."
    },
    "localization": {
        "title": "Localization",
        "explanation": "Easily localize the app into other languages with the support of type-safe structured 'slang' language generator."
    },
    "permission": {
        "title": "Permission",
        "explanation": "The boilerplate also provides a cross-platform (iOS, Android) example to request permissions and check their status with permission_handler."
    },
    "env_variables": {
        "title": "Env Variables",
        "explanation": "Environmental variables allows to define global constants shared in the app, for things like API keys, base URLs, and such."
    },
    "logging": {
        "title": "Logging & Tracking",
        "explanation": "A detailed logging and error tracking mechanism to monitor every action taking place in the application in real-time with Logging and Sentry."
    },
    "native_splash": {
        "title": "Native Splash",
        "explanation": "Flutter Native Splash automatically generates iOS, Android, and Web-native code for customizing this native splash screen background color and splash image."
    },
    "refresh_rate": {
        "title": "Refresh Rate",
        "explanation": "Support for high refresh rate displays with the flutter_displaymode package."
    }
}